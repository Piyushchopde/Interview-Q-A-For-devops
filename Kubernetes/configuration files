Demonset :
 
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: elasticsearch
  name: elasticsearch
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - image: registry.k8s.io/fluentd-elasticsearch:1.20
        name: fluentd-elasticsearch

Deployment:


apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx-container
          image: nginx:latest
          ports:
            - containerPort: 80
          resources:
            requests:
              memory: "256Mi"    # Request 256 MiB of memory
              cpu: "250m"        # Request 250 milliCPU (0.25 CPU core)
            limits:
              memory: "512Mi"    # Limit container memory to 512 MiB
              cpu: "500m"        # Limit container CPU to 500 milliCPU (0.5 CPU core)



Service 


---

apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80  # The port to access the service
      targetPort: 80  # The port on the pods to forward traffic to
  type: LoadBalancer  # You can change this to ClusterIP or NodePort based on your needs

Pod:

apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
spec:
  containers:
    - name: nginx-container
      image: nginx:latest
      ports:
- containerPort: 80


replicaset:

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: nginx-replicaset
spec:
  replicas: 3  # Number of desired replicas
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx-container
          image: nginx:latest
          ports:
- containerPort: 80


 



To configure a YAML file for a Kubernetes Pod running MySQL with environment variables, you can create a ConfigMap and then reference that ConfigMap in your Pod's YAML file. Here's an example of how to do it:
    1. Create a ConfigMap YAML file (e.g., mysql-configmap.yaml) to store your environment variables for MySQL:
yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  MYSQL_ROOT_PASSWORD: your-root-password
  MYSQL_DATABASE: your-database-name
  MYSQL_USER: your-username
  MYSQL_PASSWORD: your-user-password
Replace your-root-password, your-database-name, your-username, and your-user-password with your actual MySQL configuration values.
    2. Create a Pod YAML file (e.g., mysql-pod.yaml) that references the ConfigMap for environment variables:
yaml
apiVersion: v1
kind: Pod
metadata:
  name: mysql-pod
spec:
  containers:
    - name: mysql-container
      image: mysql:latest
      envFrom:
        - configMapRef:
            name: mysql-config
In this YAML file:
    â€¢ envFrom is used to reference the ConfigMap mysql-config. This will inject the environment variables from the ConfigMap into the mysql-container.
    3. Apply both YAML files:
bash
kubectl apply -f mysql-configmap.yaml
kubectl apply -f mysql-pod.yaml
This will create a Pod named mysql-pod running a MySQL container with the environment variables set from the ConfigMap. You can access these environment variables within your MySQL container as usual.
