Instance-Group 
   - You can install group of instances using single entity called as Instance group 
   - 2 types managed instance group and unmanaged instance group 
        - manage instance group : support auto-scaling: 3 number of autoscaling mode present 1) on 2) off 3) only-scale-out , auto-healing loadbalaceing 
          manage instance group has 2 types : 
           - statefull and stateless
              statefull is use when you have database and dataprocessing related app with the help of that you can persist your data 
              stateless is use when you want to install and perform api related task
           there are many activity you can done during configuration of MIG like autoscaling auto healing , heltcheck , CPU utiliztion ,rooling update ,high avaiblity 

Loadbalacer: loadbalancer used to distribute load 

GCP has 3 types of load balacer 1) HTTP & HTTPS loadbalancer 2) TCP loadbalancer 3) UDP loadbalacer
1) - support Internet-facing or internal ,Single- or multi-region
   - 3 types of loadbalancer present 1) Global external application load balancer: 
                                     2) Classic application load balancer
                                     3) Regional external Application Load Balancer
   - during creation of loadbalancer you need to create bankend,frondend and hostpath rule in HTTPS loadbalacer 
     in frondend you need to add port which port you want request 
     in backend you need to select Instance group 
     in hostpath if you have multiple path to send request then you can use it 

- ssl offloading means: when send request its send to https loadbalacer after its trafer to http in instance group that called as ssl off loading 
- ssl proxy is means : when usr send request to loadbalacer its convert as per requriment and send to host
- ssl passthorugh: when user send request is directly send to host without chnaging anything 
  
2) Internet-facing or internal , Single- or multi-region
3) Internet-facing or internal ,Single-region



GKE: standrad and autopilot mode 

command Practice: 
gcloud config set project my-kubernetes-project-304910
gcloud container clusters get-credentials my-cluster --zone us-central1-c --project my-kubernetes-project-304910
kubectl create deployment hello-world-rest-api --image=in28min/hello-world-rest-api:0.0.1.RELEASE
kubectl get deployment
kubectl expose deployment hello-world-rest-api --type=LoadBalancer --port=8080
kubectl get services
kubectl get services --watch
curl 35.184.204.214:8080/hello-world
kubectl scale deployment hello-world-rest-api --replicas=3
gcloud container clusters resize my-cluster --node-pool default-pool --num-nodes=2 --zone=us-central1-c
kubectl autoscale deployment hello-world-rest-api --max=4 --cpu-percent=70
kubectl get hpa
kubectl create configmap hello-world-config --from-literal=RDS_DB_NAME=todos
kubectl get configmap
kubectl describe configmap hello-world-config
kubectl create secret generic hello-world-secrets-1 --from-literal=RDS_PASSWORD=dummytodos
kubectl get secret
kubectl describe secret hello-world-secrets-1
kubectl apply -f deployment.yaml
gcloud container node-pools list --zone=us-central1-c --cluster=my-cluster
kubectl get pods -o wide
 
kubectl set image deployment hello-world-rest-api hello-world-rest-api=in28min/hello-world-rest-api:0.0.2.RELEASE
kubectl get services
kubectl get replicasets
kubectl get pods
kubectl delete pod hello-world-rest-api-58dc9d7fcc-8pv7r
 
kubectl scale deployment hello-world-rest-api --replicas=1
kubectl get replicasets
gcloud projects list
 
kubectl delete service hello-world-rest-api
kubectl delete deployment hello-world-rest-api
gcloud container clusters delete my-cluster --zone us-central1-c
